<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <Import Project="$(CustomBeforeNuProjTargets)" Condition="'$(CustomBeforeNuProjTargets)' != '' and Exists('$(CustomBeforeNuProjTargets)')"/>

  <!--
      NUSPEC PATH
  -->

  <PropertyGroup>
    <NuSpecPath>$(IntermediateOutputPath)$(Id).nuspec</NuSpecPath>
  </PropertyGroup>

  <!--
      OUTPUT PATH

      This property isn't passed to NuGet.exe - it's implicit. However, we need to know the output path
      at several occasions (e.g. incremental build or clean up) so we want a central spot to capture it.
  -->

  <PropertyGroup>
    <NuGetOutputPath>$(OutDir)$(Id).$(Version).nupkg</NuGetOutputPath>
  </PropertyGroup>

  <!--
      MSBuildAllProjects is used to keep track of all projects the build depends on.
      We make all targets depending on it to make sure everything rebuilds.
  -->

  <PropertyGroup>
    <MSBuildAllProjects Condition="Exists('$(MSBuildProjectFullPath)')">$(MSBuildAllProjects);$(MSBuildProjectFullPath)</MSBuildAllProjects>
    <MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildThisFileFullPath)</MSBuildAllProjects>
  </PropertyGroup>

  <!--
      CUSTOM TASKS
  -->

  <UsingTask AssemblyFile="$(NuProjTasksPath)" TaskName="GenerateNuSpec" />
  <UsingTask AssemblyFile="$(NuProjTasksPath)" TaskName="NuGetPack" />
  <UsingTask AssemblyFile="$(NuProjTasksPath)" TaskName="AssignTargetFramework" />
  <UsingTask AssemblyFile="$(NuProjTasksPath)" TaskName="ReadPackagesConfig" />
  <UsingTask AssemblyFile="$(NuProjTasksPath)" TaskName="ReadPdbSourceFiles" />
  <UsingTask AssemblyFile="$(NuProjTasksPath)" TaskName="AssignSourceTargetPaths" />

  <!--
    ===================================================================================================================
    ExpandProjectReferences
    ===================================================================================================================

    This target will get the build outputs of the project references

    INPUTS:
        @(ProjectReference)         The project references

    OUTPUTS:
        @(Library)                  The library Files to be packaged

    =================================================================================================================== -->

    <Target Name="ExpandProjectReferences">
      <ItemGroup>
          <_NonNuProjProjectReference Include="@(ProjectReference)"
                                      Condition="'%(ProjectReference.Extension)' != '.nuproj'" />
      </ItemGroup>

      <MSBuild Projects="@(_NonNuProjProjectReference)"
               Targets="GetOutputAndTargetFrameworkInformation">
        <Output TaskParameter="TargetOutputs"
                ItemName="_Output" />
      </MSBuild>

      <AssignTargetFramework OutputsWithTargetFrameworkInformation="@(_Output)">
        <Output TaskParameter="Libraries"
                ItemName="Library" />
      </AssignTargetFramework>

    </Target>

    <!--
    ===================================================================================================================
    ConvertItems
    ===================================================================================================================

    This target is converting specialized items groups into the general <File> item group that indicates what should
    be packaged.

    INPUTS:
        @(Library)                  Library items to be packaged
        @(Content)                  Content items to be packaged

    OUTPUTS:
        @(File)                     The <File> elements to be packaged.

    =================================================================================================================== -->

  <Target Name="ConvertItems"
          DependsOnTargets="ExpandProjectReferences">
    <CreateItem Include="@(Library)"
                AdditionalMetadata="TargetPath=lib\%(Library.TargetFramework)">
      <Output TaskParameter="Include"
              ItemName="File"/>
    </CreateItem>
    <CreateItem Include="@(Content)"
                AdditionalMetadata="TargetPath=content\%(Content.TargetPath)">
      <Output TaskParameter="Include"
              ItemName="File"/>
    </CreateItem>
  </Target>

  <!--
    ===================================================================================================================
    GenerateNuSpec
    ===================================================================================================================

    This target is creates the .nuspec file that is used to create the NuGet package (.nupkg).

    INPUTS:
        $(NuSpecPath)                  The path where the NuSpec should be written to.

        $(Id),
        $(Version),
        $(Title),
        $(Authors),
        $(Owners),
        $(Description),
        $(ReleaseNotes),
        $(Summary),
        $(Language),
        $(ProjectUrl),
        $(IconUrl),
        $(LicenseUrl),
        $(Copyright),
        $(RequireLicenseAcceptance),
        $(Tags)                        General properties of the NuSpec

        @(Dependency)                  (Optional) The NuGet package dependencies
        @(FrameworkReference)          (Optional) Framework assembly references
        @(Reference)                   (Optional) The assembly references
        @(File)                        (Optional) The files to be packaged

    =================================================================================================================== -->

  <Target Name="GenerateNuSpec"
          Inputs="@(PackageFile)"
          Outputs="$(NuSpecPath)"
          DependsOnTargets="GetPackageDependencies;GetPackageFiles;GetSourceFiles">
    <!-- Please Note:
         In order to avoid incremental build issues this target will always run.
         However, the task will make sure that it doesn't touch the file if the
         contents it would generate are identical to a previously generated
         nuspec. -->
    <GenerateNuSpec OutputFileName="$(NuSpecPath)"
                    Id="$(Id)"
                    Version="$(Version)"
                    Title="$(Title)"
                    Authors="$(Authors)"
                    Owners="$(Owners)"
                    Description="$(Description)"
                    ReleaseNotes="$(ReleaseNotes)"
                    Summary="$(Summary)"
                    Language="$(Language)"
                    ProjectUrl="$(ProjectUrl)"
                    IconUrl="$(IconUrl)"
                    LicenseUrl="$(LicenseUrl)"
                    Copyright="$(Copyright)"
                    RequireLicenseAcceptance="$(RequireLicenseAcceptance)"
                    Tags="$(Tags)"
                    Dependencies="@(Dependency)"
                    References="@(Reference)"
                    FrameworkReferences="@(FrameworkReference)"
                    Files="@(PackageFile)"/>
  </Target>

  <!--
    ===================================================================================================================
    CreatePackage
    ===================================================================================================================

    This target creates the NuGet pacakge from a .nuspec file

    INPUTS:
        $(NuSpecPath)                  The path to the NuSpec file.
        $(OutDir)                      The path to the directory where the .nupkg should be created
        $(NuProjToolPath)              The path of the directory that contains to NuGet.exe
        $(NuGetToolExe)                The name of NuGet.exe

    =================================================================================================================== -->

  <Target Name="CreatePackage"
          Inputs="$(MSBuildAllProjects);
                  $(NuSpecPath);
                  @(File)"
          Outputs="$(NuGetOutputPath)"
          DependsOnTargets="GenerateNuSpec">
    <MakeDir Directories="$(OutDir)"
             Condition="!Exists('$(OutDir)')" />
    <NuGetPack OutputDirectory="$(OutDir)"
               Symbols="$(GenerateSymbolPackage)"
               ToolPath="$(NuProjToolPath)"
               ToolExe="$(NuGetToolExe)"
               NuSpecPath="$(NuSpecPath)"/>
  </Target>

  <!--
    ===================================================================================================================
    GetPackageFiles
    ===================================================================================================================

    Gets the set of files that will be included in this package. This set will no include any files that are already
    provided by our NuGet dependencies.

    OUTPUTS:
        @(PackageFile)                        The files that will be included in this package.

    =================================================================================================================== -->

  <Target Name="GetPackageFiles"
          Returns="@(PackageFile)"
          DependsOnTargets="GetFiles;GetFileDependencies">

      <ItemGroup>
        <!-- 
            We create a new item group where the identity is the simple file name
            so that we can filter out the dependencies.
        -->
        <_FileTargetPath Include="@(File->'%(FileName)%(Extension)')">
            <OriginalItemSpec>%(File.Identity)</OriginalItemSpec>
        </_FileTargetPath>
        <!-- 
            Now we can remove all files from _FileTargetPath that come from dependencies.
        -->
        <_FileDependencyTargetPath Include="@(FileDependency->'%(FileName)%(Extension)')" />
        <_FileTargetPath Remove="@(_FileDependencyTargetPath)" />
        <!-- 
            In order to produce the final list we have to restore the original item spec.
        -->
        <PackageFile Remove="@(PackageFile)" />
        <PackageFile Include="@(_FileTargetPath->'%(OriginalItemSpec)')" />
      </ItemGroup>

  </Target>

  <!--
    ===================================================================================================================
    GetFiles
    ===================================================================================================================

    Gets the set of candidate files to be packaged. This set will also contain any files that are already provided by
    our NuGet dependencies.

    OUTPUTS:
        @(File)                        The files that are being packaged

    =================================================================================================================== -->

  <Target Name="GetFiles"
          Returns="@(File)"
          DependsOnTargets="ConvertItems" />

  <!--
    ===================================================================================================================
    GetFileDependencies
    ===================================================================================================================

    Returns the files coming from the transitive closure of all NuGet dependencies from this package.

    OUTPUTS:
        @(FileDependency)               Files coming from dependencies

    =================================================================================================================== -->

  <Target Name="GetFileDependencies"
          DependsOnTargets="GetNuProjFileDependencies;GetNuGetFileDependencies"
          Returns="@(FileDependency)">
      <ItemGroup>
          <FileDependency Include="@(NuProjFileDependency)" />
          <FileDependency Include="@(NuGetFileDependency)" />
      </ItemGroup>
  </Target>

  <!--
    ===================================================================================================================
    GetNuProjFileDependencies
    ===================================================================================================================

    Returns the files coming from the transitive closure of all NuGet dependencies from this package.

    OUTPUTS:
        @(FileDependency)               Files coming from dependencies

    =================================================================================================================== -->

  <Target Name="GetNuProjFileDependencies"
          Returns="@(NuProjFileDependency)">
      <ItemGroup>
          <_NuProjProjectReference Include="@(ProjectReference)"
                                   Condition="'%(ProjectReference.Extension)' == '.nuproj'" />
      </ItemGroup>
      <MSBuild Projects="@(_NuProjProjectReference)"
               Targets="GetPackageFiles">
        <Output TaskParameter="TargetOutputs"
                ItemName="NuProjFileDependency" />
      </MSBuild>
  </Target>

  <!--
    ===================================================================================================================
    GetNuGetFileDependencies
    ===================================================================================================================

    Returns the files coming from the transitive closure of all NuGet dependencies from this package.

    OUTPUTS:
        @(NuGetFileDependency)               Files coming from dependencies

    =================================================================================================================== -->

  <Target Name="GetNuGetFileDependencies"
          Returns="@(NuGetFileDependency)">
      <ItemGroup>
        <NuGetFileDependency Include="%(NuGetDependency.PackageDirectoryPath)\**\*"
                             Condition="'%(NuGetDependency.PackageDirectoryPath)' != ''" />
      </ItemGroup>
  </Target>

  <!--
    ===================================================================================================================
    GetPackageDependencies
    ===================================================================================================================

    Get the direct package dependencies of this package. It doesn't include dependencies of dependencies.

    OUTPUTS:
        @(Dependency)               The NuGet dependencies of this package.

    =================================================================================================================== -->

  <Target Name="GetPackageDependencies"
          DependsOnTargets="GetNuProjPackageDependencies;GetNuGetPackageDependencies"
          Returns="@(Dependency)">
    <ItemGroup>
      <Dependency Include="@(NuProjDependency)" />
      <Dependency Include="@(NuGetDependency)" />
    </ItemGroup>
  </Target>

  <!--
    ===================================================================================================================
    GetNuProjPackageDependencies
    ===================================================================================================================

    Get the direct package dependencies that come from other .nuproj files.

    OUTPUTS:
        @(NuProjDependency)               The NuGet dependencies of this package.

    =================================================================================================================== -->

  <Target Name="GetNuProjPackageDependencies"
          Returns="@(NuProjDependency)">
      <ItemGroup>
          <_NuProjProjectReference Include="@(ProjectReference)"
                                   Condition="'%(ProjectReference.Extension)' == '.nuproj'" />
      </ItemGroup>
      <MSBuild Projects="@(_NuProjProjectReference)"
               Targets="GetPackageIdentity">
        <Output TaskParameter="TargetOutputs"
                ItemName="NuProjDependency" />
      </MSBuild>
  </Target>

  <!--
    ===================================================================================================================
    GetNuGetPackageDependencies
    ===================================================================================================================

    Get the direct package dependencies that come from regular, i.e. non-.nuproj NuGet dependencies.

    OUTPUTS:
        @(NuGetDependency)               The NuGet dependencies of this package.

    =================================================================================================================== -->

  <Target Name="GetNuGetPackageDependencies"
          Returns="@(NuGetDependency)">
      <ItemGroup>
          <_PackagesConfig Include="@(ProjectReference->'%(RootDir)%(Directory)packages.config')" />
          <_PackagesConfig Remove="@(_PackagesConfig)"
                           Condition="!Exists(%(_PackagesConfig.Identity))" />
      </ItemGroup>
      <ReadPackagesConfig PackagesConfigPath="%(_PackagesConfig.Identity)"
                          Condition="'%(_PackagesConfig.Identity)' != ''">
        <Output TaskParameter="Packages"
                ItemName="NuGetDependency" />
      </ReadPackagesConfig>
  </Target>


  <!-- 
    ===================================================================================================================
    GetSourceFiles
    =================================================================================================================== -->

  <Target Name="GetSourceFiles"
          DependsOnTargets="GetPackageFiles"
          Condition="'$(EmbedSourceFiles)' == 'True'"
          Returns="@(_SourceFileWithTargetPath)">
    <ItemGroup>
      <_PdbFiles Include="@(PackageFile)"
                 Condition="'%(Extension)' == '.pdb'" />
    </ItemGroup>
    <ReadPdbSourceFiles PdbPath="%(_PdbFiles.Identity)">
      <Output TaskParameter="SourcePaths"
              ItemName="_SourceFile" />
    </ReadPdbSourceFiles>
    <!-- Some compilers (like VB) have source files listed that don't actually exist.
         Since we can only package existing files we'll need to exlude those files. -->
    <ItemGroup>
      <_SourceFile Remove="@(_SourceFile)"
                   Condition="!Exists(%(_SourceFile.Identity))" />
    </ItemGroup>
    <AssignSourceTargetPaths SourceFiles="@(_SourceFile)">
      <Output TaskParameter="SourceFilesWithTargetPath"
              ItemName="_SourceFileWithTargetPath" />
      <Output TaskParameter="SourceFilesWithTargetPath"
              ItemName="PackageFile" />
    </AssignSourceTargetPaths>
  </Target>

  <!--
    ===================================================================================================================
    GetPackageIdentity
    ===================================================================================================================

    Returns an item whose identity is the $(Id). The version is included in custom metadata item Version. This format
    is identitcal to the one used to describe package dependencies.

    OUTPUTS:
        $(_PackageIdentity)               The Id and Version of this package

    =================================================================================================================== -->

  <Target Name="GetPackageIdentity"
          Returns="@(_PackageIdentity)">
    <ItemGroup>
      <_PackageIdentity Include="$(Id)">
        <Version>$(Version)</Version>
      </_PackageIdentity>
    </ItemGroup>
  </Target>

  <!--
    ===================================================================================================================
    Clean, Build, Rebuild
    ===================================================================================================================

    These are the standard targets to clean, build and rebuild a NuGet package.

    =================================================================================================================== -->

  <Target Name="Clean">
    <MSBuild Projects="@(ProjectReference)"
             Targets="Clean" />
    <ItemGroup>
      <_ToBeDeleted Include="$(NuSpecPath)" />
      <_ToBeDeleted Include="$(NuGetOutputPath)" />
    </ItemGroup>
    <Delete Files="@(_ToBeDeleted)" />
  </Target>

  <Target Name="Build" DependsOnTargets="CreatePackage" />

  <Target Name="Rebuild" DependsOnTargets="Clean;Build" />

  <Import Project="$(CustomAfterNuProjTargets)" Condition="'$(CustomAfterNuProjTargets)' != '' and Exists('$(CustomAfterNuProjTargets)')"/>

</Project>